🧠 What is a Hash Table?
A Hash Table is a data structure that stores key-value pairs and allows fast access to values using keys.

It uses a hash function to compute an index where the value is stored.

🔍 Why Use It?

Feature	Benefit
Fast Access	Average-case O(1) time
Flexible	Can store any key-value type
Widely used	Basis for Python dict, Java HashMap
🧱 Internal Components
Array (data_map)
Stores the data. Each index is a bucket.

Hash Function (hash())
Converts a string key into an index in the array.

Collision Handling
If two keys hash to the same index, we store both in a list (chaining).

🧪 Hash Table Implementation in Python
✅ Constructor and Hash Function
python
Copy
Edit
class HashTable:
    def __init__(self, size=7):
        self.data_map = [None] * size  # array of size 7

    def hash(self, key):
        my_hash = 0
        for letter in key:
            my_hash = (my_hash + ord(letter) * 23) % len(self.data_map)
        return my_hash
✅ set(key, value) — Insert key-value pair
python
Copy
Edit
    def set(self, key, value):
        index = self.hash(key)
        if self.data_map[index] is None:
            self.data_map[index] = []
        self.data_map[index].append([key, value])
🧠 How it works:

Calculate the index using hash()

If no value is stored at that index, create a list

Add [key, value] to the list

🔍 get(key) — Retrieve value by key
python
Copy
Edit
    def get(self, key):
        index = self.hash(key)
        if self.data_map[index] is not None:
            for pair in self.data_map[index]:
                if pair[0] == key:
                    return pair[1]
        return None
🧠 How it works:

Go to the index

Loop through the list of [key, value] pairs (to handle collisions)

Return value if key is found

🗝️ keys() — Return all keys
python
Copy
Edit
    def keys(self):
        all_keys = []
        for bucket in self.data_map:
            if bucket is not None:
                for pair in bucket:
                    all_keys.append(pair[0])
        return all_keys
📦 Example
python
Copy
Edit
ht = HashTable()
ht.set("apple", 100)
ht.set("banana", 200)
ht.set("orange", 300)

print(ht.get("banana"))  # Output: 200
print(ht.get("grapes"))  # Output: None
print(ht.keys())         # Output: ['apple', 'banana', 'orange']
⚠️ Collisions (Same index for multiple keys)
Handled using chaining: store multiple [key, value] pairs in a list at the same index.

python
Copy
Edit
Index 6: [['abc', 100], ['acb', 200]]  # both hashed to 6
⏱ Time & Space Complexity

Operation	Average Time	Worst Case (due to collisions)
set()	O(1)	O(n) (if all hash to same index)
get()	O(1)	O(n)
keys()	O(n)	O(n)
Space	O(n)	O(n)
✅ Final Working Code
python
Copy
Edit
class HashTable:
    def __init__(self, size=7):
        self.data_map = [None] * size

    def hash(self, key):
        my_hash = 0
        for letter in key:
            my_hash = (my_hash + ord(letter) * 23) % len(self.data_map)
        return my_hash

    def set(self, key, value):
        index = self.hash(key)
        if self.data_map[index] is None:
            self.data_map[index] = []
        self.data_map[index].append([key, value])

    def get(self, key):
        index = self.hash(key)
        if self.data_map[index] is not None:
            for pair in self.data_map[index]:
                if pair[0] == key:
                    return pair[1]
        return None

    def keys(self):
        all_keys = []
        for bucket in self.data_map:
            if bucket is not None:
                for pair in bucket:
                    all_keys.append(pair[0])
        return all_keys

    def print_HT(self):
        for i, val in enumerate(self.data_map):
            print(i, ": ", val)
🧠 Real-life Applications
Python dict, Java HashMap

Caching systems (e.g., LRU Cache)

Fast lookups in databases

Symbol tables in compilers

Password hashing

